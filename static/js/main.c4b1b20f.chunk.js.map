{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","className","About","App","basename","to","path","component","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUA6CA,SAASA,IACP,OACE,yBAAKC,UAAU,QAEb,yBAAKA,UAAU,WACX,2BAAOA,UAAU,WACb,0CACA,4CACA,4BACE,yCACA,qCACA,mDACA,mCACA,0CACA,sCACA,+CAEF,2CACA,4BACE,sCACA,qCACA,mCACA,2CAGN,6BAASA,UAAU,QACf,2CACA,+CACA,sGAGA,uQAKA,8JASd,SAASC,IACP,OACE,yBAAKD,UAAU,SAEb,yBAAKA,UAAU,WACX,2BAAOA,UAAU,WACb,wCAEJ,6BAASA,UAAU,QACf,4CACA,6CAOCE,M,iLA/FX,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,yBAAKH,UAAU,OACb,yBAAKA,UAAU,WACb,gCACE,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMI,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,+BAGJ,2CAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWL,IAChC,kBAAC,IAAD,CAAOI,KAAK,IAAIC,UAAWP,KAE7B,gCACE,6DACA,iFACqD,uBAAGQ,KAAK,sDAAR,8B,GAvBjDC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c4b1b20f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename='/'>\n        <div className=\"App\">\n          <div className=\"Content\">\n            <header>\n              <nav>\n                <ul>\n                  <li><Link to=\"/\">Home</Link></li>\n                  <li><Link to=\"/about\">About</Link></li>\n                  <li></li>\n                </ul>\n              </nav>\n              <button>Button</button>\n            </header>\n            <Switch>\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/\" component={Home} />\n            </Switch>\n            <footer>\n              <h3>Ewan Forbes - DevOps Engineer</h3>\n              <p>\n                This site is made with react and react-router-dom. <a href=\"https://github.com/redemptive/redemptive.github.io\">\n                  See the code here\n                </a>\n              </p>\n            </footer>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nfunction Home() {\n  return (\n    <div className=\"Home\">\n\n      <div className=\"wrapper\">\n          <aside className=\"sidebar\">\n              <h3>Key Skills</h3>\n              <h4>DevOps/Cloud</h4>\n              <ul>\n                <li>Terraform</li>\n                <li>Azure</li>\n                <li>Azure ARM Templates</li>\n                <li>AWS</li>\n                <li>Networking</li>\n                <li>Docker</li>\n                <li>Docker Compose</li>\n              </ul>\n              <h4>Development</h4>\n              <ul>\n                <li>NodeJs</li>\n                <li>React</li>\n                <li>TDD</li>\n                <li>Rest APIs</li>\n              </ul>\n          </aside>\n          <section className=\"main\">\n              <h2>Ewan Forbes</h2>\n              <h3>DevOps Engineer</h3>\n              <p>\n                Hello. I'm Ewan Forbes, a DevOps engineer currently working from London\n              </p>\n              <p>\n                There's nothing I enjoy more than learning a new technology or skill.\n                This has given me a wide variety of skills at all stages of the development lifecycle.\n                With my endless curiosity for IT, I'll continue learning and experimenting.\n              </p>\n              <p>\n                Please, feel free to have a browse. There is everything from JavaScript browser games, nodejs rest apis with tdd and docker.  \n              </p>\n          </section>\n      </div>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div className=\"About\">\n\n      <div className=\"wrapper\">\n          <aside className=\"sidebar\">\n              <h3>Sidebar</h3>\n          </aside>\n          <section className=\"main\">\n              <h2>Main - about</h2>\n              <p>Lorem ipsum</p>\n          </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}